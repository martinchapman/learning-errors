digraph finite_automaton {
	graph[fontsize=8]
	rankdir=LR;
	size=8;

node [shape=rectangle, color = green, label= "Dominating edges: Non_Crossing_Biased_Climb, ALIM, Inhibit_Biased_Climb, Non_Crossing_Biased_Descend, Own_Below_Threat, Own_Above_Threat, alt_sep_test, initialize, fake1, Learn_Assert"]; dom_edges;
	node [shape=doublecircle, style="", color=green, label = "D"]; q1;
	node [shape=circle, style="", color=green, label = ""]; q0;
	node [shape=circle, style="", color=green, label = ""]; q2;
	node [shape=circle, style="", color=green, label = ""]; q3;
	node [shape=circle, style="", color=green, label = ""]; q4;
	node [shape=circle, style="", color=green, label = ""]; q5;
	node [shape=circle, style="", color=green, label = ""]; q6;
	node [shape=circle, style="", color=green, label = ""]; q7;
	node [shape=circle, style="", color=green, label = ""]; q8;
	node [shape=circle, style="", color=green, label = ""]; q9;
	node [shape=circle, style="", color=green, label = ""]; q10;
	node [shape=circle, style="", color=green, label = ""]; q11;
	node [shape=circle, style="", color=green, label = ""]; q12;
	node [shape=plaintext, label="", style=""]; iq0;
	iq0 -> q0 [color=blue];
	q0 -> q12 [label="initialize", color = green];
	q2 -> q1 [label="Learn_Assert", color = green];
	q3 -> q2 [label="Own_Above_Threat", color = green];
	q4 -> q3 [label="ALIM", color = green];
	q5 -> q4 [label="fake1", color = green];
	q6 -> q5 [label="Own_Below_Threat", color = green];
	q7 -> q6 [label="Non_Crossing_Biased_Descend", color = green];
	q8 -> q7 [label="ALIM", color = green];
	q9 -> q8 [label="Own_Above_Threat", color = green];
	q10 -> q9 [label="Inhibit_Biased_Climb", color = green];
	q11 -> q10 [label="Non_Crossing_Biased_Climb", color = green];
	q12 -> q11 [label="alt_sep_test", color = green];
};
