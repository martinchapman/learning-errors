Add the following to the GUI:

1. for each function, a checkmark that upon activation also makes an event out of the exit point of the function. It adds letters, which is not so good, but it might be useful to distinguish between, say
f() {
g();
h();
}

And
f() {
g()
}
g() {
h();
}

Goto-instrument supports adding events at exit points.

2. Slicing: with this option, 'f' will be removed from the alphabet if it is not in the slice of the assertion.


3. positive pre-checks should be added to the positive-queries cache. 

4. (?) currently with the trap mechanism we may delay convergance. 
For example, a word a,b,c,assert
There is a branch after b that lets the program either go to c and assert, or just exit the program. If it exits the program, the trap nondeterministically chooses c,assert and declares this word as a negaive feedback. Despite the fact that we could have converged at that point (answer yes to the conjecture). libalf does not know if we answer with a negative or positive feedback - it just produces membership queries. But what if this is not really a counterexample? i.e., then all the membership queries are supposed to be consistent with the current automaton. This seems to contradict an invariant of L*, namely that the feedback changes the conjecture. 
It seems that as long as there are words shorter than the bound that are accepted by A but are not supported yet by the assumptions, then we will not converge. What happens is that those words serve as feedback, asked as a membership query, and only then added as an assumption.
Possible solution: do not do it via a feedback to the conjecture. It other words: when we find a negative feedback via the trap, ask separately a membership query about this word, and if it is in the language, then repeat with the same conjecture but with an additional assumption. This is only true about feedback from the trap. 'normal' negative feedback is indeed a counterexample.

5. Limiting tests to those that have a loop bound. 